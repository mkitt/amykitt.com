{"version":3,"sources":["assets/X.tsx","hooks/useCss.ts","components/Button.tsx","components/Grid.tsx","components/Container.tsx","components/Flex.tsx","components/Heading.tsx","components/Img.tsx","components/View.tsx","components/Markdown.tsx","components/Modal.tsx","assets/Mark.tsx","components/Link.tsx","components/Text.tsx","components/Navbar.tsx","components/Tile.tsx","hooks/useDetectTouch.ts","hooks/useRowWidth.ts","hooks/useScrollToAnchor.ts","hooks/useTileDimension.ts","App.tsx","index.tsx"],"names":["X","width","height","viewBox","stroke","x1","y1","x2","y2","memo","noob","Object","freeze","useCss","css","Button","defaultProps","type","Grid","Container","Flex","Heading","Img","View","Root","Title","Subheading","StyledImg","List","Link","HeadingRenderer","props","level","Comp","as","components","heading","image","link","linkReference","list","root","Markdown","source","renderers","skipHtml","overlayRules","backgroundColor","bottom","left","opacity","overflowY","paddingTop","position","right","top","transition","zIndex","modalRules","border","marginLeft","marginRight","maxWidth","minHeight","outline","overflow","paddingBottom","paddingLeft","paddingRight","show","hide","document","setAppElement","Modal","children","contentLabel","isOpen","onRequestClose","handleOpen","useCallback","el","body","querySelector","requestAnimationFrame","scrollTop","useEffect","bodyOpenClassName","className","closeTimeoutMS","onAfterOpen","overlayClassName","afterOpen","base","beforeClose","Mark","d","fill","Text","getLinkStyle","isActive","borderBottom","color","Navbar","handleClickToSection","isAboutActive","alignItems","fontSize","fontWeight","textTransform","role","gridTemplateColumns","display","href","onClick","title","justifyContent","margin","padding","partWhite","zeroWhite","rowSpan","rowGap","Math","ceil","Tile","gridRowEnd","backgroundImage","content","id","handleClick","alt","src","useDetectTouch","docElem","documentElement","classList","add","addEventListener","onTouchStart","removeEventListener","remove","getWidth","ref","current","firstChild","getBoundingClientRect","Number","useRowWidth","useState","setWidth","handleResize","window","useScrollToAnchor","e","preventDefault","selector","currentTarget","getAttribute","replace","element","getElementById","scrollIntoView","behavior","scroll","useTileDimension","allowableWidth","naturalWidth","naturalHeight","ratio","NaN","widthConstrainedRelativeHeight","round","min","works","home","tiles","map","projects","find","project","includes","Paddle","App","useInView","threshold","aboutRef","setProject","rowRef","useRef","rowWidth","scrollToAnchor","handleClickProject","stuff","handleCloseProject","undefined","handleNextProject","stopPropagation","currentIndex","indexOf","nextIndex","length","nextProject","handlePrevProject","prevIndex","prevProject","gridAutoRows","gridGap","work","getTileDimension","tileWidth","tileHeight","tile","about","textAlign","a","IntersectionObserver","style","polyfill","loadPolyfills","rootElement","index","ReactDOM","render"],"mappings":"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","file":"static/js/main.760b771f.chunk.js","sourcesContent":["import { memo } from 'react'\n\nconst X = () => (\n  <svg width={24} height={24} viewBox=\"0 0 24 24\">\n    <g stroke=\"currentColor\">\n      <line x1=\"2\" y1=\"2\" x2=\"22\" y2=\"22\" />\n      <line x1=\"22\" y1=\"2\" x2=\"2\" y2=\"22\" />\n    </g>\n  </svg>\n)\n\nexport default memo(X)\n","import { CSSObject } from '@emotion/styled/macro'\n\nconst noob = Object.freeze({})\n\nexport type useCssType = {\n  readonly css?: CSSObject\n}\n\nconst useCss = ({ css }: useCssType) => ({\n  ...(css != null ? css : noob),\n})\n\nexport default useCss\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\nconst Button = styled.button<useCssType>(\n  {\n    background: 'transparent',\n    border: 0,\n    borderRadius: 0,\n    color: 'inherit',\n    cursor: 'pointer',\n    font: 'inherit',\n    margin: 0,\n    outline: 0,\n    padding: 0,\n    position: 'relative',\n    textAlign: 'left',\n    textTransform: 'none',\n    WebkitAppearance: 'button',\n  },\n  useCss,\n)\n\nButton.defaultProps = {\n  type: 'button',\n}\n\nexport default memo(Button)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\ntype PropsType = {\n  readonly as?: 'div' | 'nav' | 'section'\n} & useCssType\n\nconst Grid = styled.div<PropsType>({ display: 'grid' }, useCss)\n\nexport default memo(Grid)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport Grid from './Grid'\n\nconst Container = styled(Grid)({\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  maxWidth: '82rem',\n  paddingLeft: '1rem',\n  paddingRight: '1rem',\n  width: '100%',\n})\n\nexport default memo(Container)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\ntype PropsType = {\n  readonly as?: 'div' | 'nav' | 'section'\n} & useCssType\n\nconst Flex = styled.div<PropsType>({ display: 'flex' }, useCss)\n\nexport default memo(Flex)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\ntype PropsType = {\n  readonly as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n} & useCssType\n\nconst Heading = styled.h2<PropsType>(\n  {\n    fontSize: '0.9375rem',\n    fontWeight: 700,\n    lineHeight: 1,\n    margin: 0,\n    textTransform: 'uppercase',\n  },\n  useCss,\n)\n\nexport default memo(Heading)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\nconst Img = styled.img<useCssType>(\n  {\n    border: 0,\n    fontSize: '0.75em',\n    height: 'auto',\n    maxWidth: '100%',\n    outline: 0,\n    verticalAlign: 'middle',\n  },\n  useCss,\n)\n\nexport default memo(Img)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\ntype PropsType = {\n  readonly as?: 'div' | 'main'\n} & useCssType\n\nconst View = styled.div<PropsType>({}, useCss)\n\nexport default memo(View)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport Heading from './Heading'\nimport Img from './Img'\nimport View from './View'\n\ntype HeadingsPropsType = {\n  readonly level: number\n}\n\nconst Root = styled(View)({\n  color: '#858585',\n  fontSize: '0.875rem',\n  position: 'relative',\n  '@media (min-width: 47.5em)': {\n    '#about &': {\n      paddingLeft: 260,\n    },\n  },\n})\n\nconst Title = styled(Heading)({\n  '#about &': {\n    fontSize: '1.125rem',\n  },\n})\n\nconst Subheading = styled(Heading)({\n  fontWeight: 400,\n})\n\nconst StyledImg = styled(Img)({\n  marginBottom: '0.25rem',\n  '&[alt=\"Amy Kitt\"]': {\n    width: 120,\n    height: 241,\n  },\n  '@media (min-width: 47.5em)': {\n    '&[alt=\"Amy Kitt\"]': {\n      height: 483,\n      left: 0,\n      position: 'absolute',\n      top: 0,\n      width: 240,\n    },\n  },\n})\n\nconst List = styled('ul')({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n})\n\nconst Link = styled.a({\n  backgroundColor: 'transparent',\n  color: 'inherit',\n})\n\nconst HeadingRenderer = (props: HeadingsPropsType) => {\n  const { level } = props\n  const headings = [Title, Heading, Subheading]\n  const Comp = headings[level - 1] || Heading\n  // @ts-ignore\n  return <Comp as={`h${level}`} {...props} />\n}\n\nconst components = {\n  heading: (props: any) => <HeadingRenderer {...props} />,\n  image: (props: any) => <StyledImg {...props} />,\n  link: (props: any) => <Link {...props} />,\n  linkReference: (props: any) => <Link {...props} />,\n  list: (props: any) => <List {...props} />,\n  root: (props: any) => <Root {...props} />,\n}\n\ntype PropsType = {\n  readonly source: string\n}\n\nconst Markdown = ({ source }: PropsType) => (\n  <ReactMarkdown renderers={components} skipHtml source={source} />\n)\n\nexport default memo(Markdown)\n","import { ClassNames, CSSObject } from '@emotion/react'\nimport { useCallback, useEffect } from 'react'\nimport ReactModal, { setAppElement } from 'react-modal'\n\ntype PropsType = {\n  readonly children: JSX.Element\n  readonly contentLabel?: string\n  readonly isOpen: boolean\n  readonly onRequestClose?: () => void\n}\n\nconst overlayRules: CSSObject = {\n  backgroundColor: 'rgba(124, 124, 129, 0.5)',\n  bottom: 0,\n  left: 0,\n  opacity: 0,\n  overflowY: 'auto',\n  paddingTop: '10rem',\n  position: 'fixed',\n  right: 0,\n  top: 0,\n  transition: 'opacity 0.333s',\n  zIndex: 2000,\n}\n\nconst modalRules: CSSObject = {\n  backgroundColor: '#fff',\n  border: '5px solid #fff',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  maxWidth: '80.75rem',\n  minHeight: '100vh',\n  outline: 0,\n  overflow: 'auto',\n  paddingBottom: '1.25rem',\n  paddingLeft: '1.25rem',\n  paddingRight: '1.25rem',\n  paddingTop: '5rem',\n  position: 'relative',\n  '@media (min-width: 47.5em)': {\n    paddingBottom: '5rem',\n    paddingLeft: '5rem',\n    paddingRight: '5rem',\n  },\n}\n\nconst show: CSSObject = {\n  // @ts-ignore bad upstream typing..\n  opacity: '1 !important',\n}\n\nconst hide: CSSObject = {\n  // @ts-ignore bad upstream typing..\n  opacity: '0 !important',\n}\n\n// @see: https://github.com/reactjs/react-modal#app-element\nconst isTest = process.env.NODE_ENV === 'test'\nif (document != null && !isTest) {\n  setAppElement('body')\n}\n\n// -------------------------------------\n\nconst Modal = ({\n  children,\n  contentLabel,\n  isOpen,\n  onRequestClose,\n  ...props\n}: PropsType) => {\n  const handleOpen = useCallback(() => {\n    const el = document.body.querySelector('.ReactModalPortal > div')\n    if (el != null) {\n      requestAnimationFrame(() => (el.scrollTop = 0))\n    }\n  }, [])\n  useEffect(() => handleOpen())\n  return (\n    <ClassNames>\n      {({ css }) => (\n        <ReactModal\n          bodyOpenClassName=\"scrollIsDisabled\"\n          className={css(modalRules)}\n          closeTimeoutMS={500}\n          contentLabel={contentLabel}\n          isOpen={isOpen}\n          onAfterOpen={handleOpen}\n          onRequestClose={onRequestClose}\n          overlayClassName={{\n            afterOpen: css(show),\n            base: css(overlayRules),\n            beforeClose: css(hide),\n          }}\n          {...props}\n        >\n          {children}\n        </ReactModal>\n      )}\n    </ClassNames>\n  )\n}\n\nModal.defaultProps = {\n  contentLabel: 'Modal',\n  onRequestClose: null,\n}\n\nexport default Modal\n","import { memo } from 'react'\n\nconst Mark = () => (\n  <svg width={43} height={47} viewBox=\"0 0 73 80\">\n    <path\n      d=\"M0,37.4468085 L0,29.5421277 L7.6313703,29.5421277 C19.0775814,28.9514894 25.2042934,24.9957447 25.2042934,8.90893617 L25.2042934,0 L33.7745975,0 L33.7745975,37.4468085 L0,37.4468085 Z\"\n      fill=\"#7c7c7c\"\n    />\n    <path\n      d=\"M33.7745975,80 L33.7745975,72.0953191 L26.1432272,72.0953191 C14.6970161,71.506383 8.57030411,67.5506383 8.57030411,51.4621277 L8.57030411,42.5531915 L0,42.5531915 L0,80 L33.7745975,80 Z\"\n      fill=\"#7c7c7c\"\n    />\n    <path\n      d=\"M72.6153846,37.4468085 L72.6153846,29.5421277 L64.9840143,29.5421277 C53.5378032,28.9514894 47.4110912,24.9957447 47.4110912,8.90893617 L47.4110912,0 L38.8407871,0 L38.8407871,37.4468085 L72.6153846,37.4468085 Z\"\n      fill=\"#e1aee8\"\n    />\n  </svg>\n)\n\nexport default memo(Mark)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\nconst Link = styled.a<useCssType>(\n  {\n    backgroundColor: 'transparent',\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n  useCss,\n)\n\nexport default memo(Link)\n","import styled from '@emotion/styled/macro'\nimport { memo } from 'react'\nimport useCss, { useCssType } from '../hooks/useCss'\n\ntype PropsType = {\n  readonly as?: 'span' | 'h1' | 'p'\n} & useCssType\n\nconst Text = styled.span<PropsType>(\n  {\n    margin: 0,\n  },\n  useCss,\n)\n\nexport default memo(Text)\n","import { memo, SyntheticEvent } from 'react'\nimport Mark from '../assets/Mark'\nimport Container from './Container'\nimport Flex from './Flex'\nimport Grid from './Grid'\nimport Link from './Link'\nimport Text from './Text'\nimport View from './View'\n\nconst getLinkStyle = ({ isActive }: { isActive?: boolean }) => ({\n  borderBottom: `1px solid ${\n    isActive === true ? 'currentColor' : 'transparent'\n  }`,\n  transition: 'color 0.333s',\n  '.no-touch &:hover': {\n    color: '#000',\n  },\n})\n\ntype PropsType = {\n  readonly handleClickToSection: (e: SyntheticEvent) => void\n  readonly isAboutActive: boolean\n}\n\nconst Navbar = ({ handleClickToSection, isAboutActive }: PropsType) => (\n  <Flex\n    as=\"nav\"\n    css={{\n      alignItems: 'center',\n      backgroundColor: '#fff',\n      color: '#7c7c7c',\n      fontSize: '0.75rem',\n      fontWeight: 700,\n      height: '10rem',\n      position: 'sticky',\n      textTransform: 'uppercase',\n      top: 0,\n      zIndex: 5,\n    }}\n    role=\"navigation\"\n  >\n    <Container\n      css={{\n        '@media (min-width: 47.5em)': {\n          gridTemplateColumns: '5rem 1fr 5rem',\n        },\n      }}\n    >\n      <View\n        css={{\n          '@media (max-width: 47.4375em)': {\n            display: 'none',\n          },\n        }}\n      >\n        <Link href=\"/\" onClick={handleClickToSection} title=\"AK Design\">\n          <Mark />\n        </Link>\n      </View>\n      <Grid css={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text\n          as=\"h1\"\n          css={{\n            fontSize: 'inherit',\n            fontWeight: 400,\n            margin: 0,\n            textTransform: 'uppercase',\n          }}\n        >\n          <strong>Hi. </strong>\n          <span>\n            If you like what you see below perhaps we can work together in the\n            future.\n          </span>\n        </Text>\n        <Flex\n          css={{\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Link\n            css={getLinkStyle({ isActive: !isAboutActive })}\n            href=\"/\"\n            onClick={handleClickToSection}\n            title=\"View Work\"\n          >\n            Work\n          </Link>\n          <Text css={{ padding: '0 0.5rem' }}>&bull;</Text>\n          <Link\n            css={getLinkStyle({ isActive: isAboutActive })}\n            href=\"#about\"\n            onClick={handleClickToSection}\n            title={`About AK Design ${isAboutActive}`}\n          >\n            About\n          </Link>\n          <Text css={{ padding: '0 0.5rem' }}>&bull;</Text>\n          <Link\n            css={getLinkStyle({ isActive: false })}\n            href=\"mailto:amy.kitt@gmail.com\"\n            title=\"Say hello!\"\n          >\n            Contact\n          </Link>\n        </Flex>\n      </Grid>\n    </Container>\n  </Flex>\n)\n\nexport default memo(Navbar)\n","import { memo, SyntheticEvent } from 'react'\nimport Button from './Button'\nimport Img from './Img'\n\ntype PropsType = {\n  readonly allowableWidth: number\n  readonly handleClick: (e: SyntheticEvent) => void\n  readonly id: string\n  readonly src: string\n  readonly title: string\n  readonly width: number\n  readonly height: number\n}\n\nconst partWhite = 'rgba(255, 255, 255, 0.4)'\nconst zeroWhite = 'rgba(255, 255, 255, 0)'\n\nconst rowSpan = (height: number, rowGap = 4) =>\n  Math.ceil((height + rowGap) / rowGap)\n\nconst Tile = (props: PropsType) => {\n  return (\n    <Button\n      css={{\n        gridRowEnd: `span ${rowSpan(props.height)}`,\n        '&::after': {\n          backgroundImage: `linear-gradient(45deg, ${partWhite} 0%, ${partWhite} 50%, ${zeroWhite} 50%, ${zeroWhite} 100%)`,\n          bottom: 0,\n          content: '\"\"',\n          left: 0,\n          opacity: 0,\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          transition: 'opacity 0.25s',\n          zIndex: 2,\n        },\n        '.no-touch &:hover::after': {\n          opacity: 1,\n        },\n      }}\n      id={props.id}\n      onClick={props.handleClick}\n      title={props.title}\n    >\n      <Img\n        alt={props.title}\n        src={props.src}\n        width={props.width}\n        height={props.height}\n      />\n    </Button>\n  )\n}\n\nexport default memo(Tile)\n","import { useEffect } from 'react'\n\nfunction useDetectTouch() {\n  useEffect(() => {\n    if (typeof document === 'undefined') {\n      return\n    }\n    const docElem: Element = document.documentElement\n    if (!('ontouchstart' in docElem)) {\n      docElem.classList.add('no-touch')\n    }\n    const onTouchStart = () => {\n      document.removeEventListener('touchstart', onTouchStart)\n      docElem.classList.remove('no-touch')\n      docElem.classList.add('has-touch')\n    }\n    document.addEventListener('touchstart', onTouchStart)\n  }, [])\n  return null\n}\n\nexport default useDetectTouch\n","import { useEffect, useState } from 'react'\n\nconst getWidth = (ref: any) => {\n  const width =\n    ref.current &&\n    ref.current.firstChild &&\n    ref.current.firstChild.getBoundingClientRect().width\n  return Number(width)\n}\n\nfunction useRowWidth(ref: any) {\n  const [width, setWidth] = useState(0)\n  useEffect(() => {\n    const handleResize = () => setWidth(getWidth(ref))\n    window.addEventListener('resize', handleResize)\n    setWidth(getWidth(ref))\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [ref])\n  return width\n}\n\nexport default useRowWidth\n","import { useCallback, SyntheticEvent } from 'react'\n\nfunction useScrollToAnchor() {\n  return useCallback((e: SyntheticEvent) => {\n    e.preventDefault()\n    const href = e.currentTarget.getAttribute('href') || ''\n    const selector = href.replace('#', '')\n    if (selector === '/') {\n      window.scroll({ behavior: 'smooth', left: 0, top: 0 })\n      return\n    }\n    const element = document.getElementById(selector)\n    if (element != null) element.scrollIntoView({ behavior: 'smooth' })\n  }, [])\n}\n\nexport default useScrollToAnchor\n","type PropsType = {\n  readonly allowableWidth: number\n  readonly naturalWidth: number\n  readonly naturalHeight: number\n}\n\nfunction useTileDimension({\n  allowableWidth,\n  naturalWidth,\n  naturalHeight,\n}: PropsType) {\n  const ratio = naturalWidth ? naturalWidth / naturalHeight : NaN\n  const widthConstrainedRelativeHeight = Math.round(\n    allowableWidth * (1 / ratio),\n  )\n  const height = Math.min(widthConstrainedRelativeHeight, naturalHeight, 1200)\n  const width = Math.round(height * ratio)\n  return { width, height }\n}\n\nexport default useTileDimension\n","import {\n  Fragment,\n  memo,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from 'react'\nimport { useInView } from 'react-intersection-observer'\nimport X from './assets/X'\nimport Button from './components/Button'\nimport Container from './components/Container'\nimport Flex from './components/Flex'\nimport Grid from './components/Grid'\nimport Markdown from './components/Markdown'\nimport Modal from './components/Modal'\nimport Navbar from './components/Navbar'\nimport Tile from './components/Tile'\nimport View from './components/View'\nimport { about, home, projects } from './data.json'\nimport useDetectTouch from './hooks/useDetectTouch'\nimport useRowWidth from './hooks/useRowWidth'\nimport useScrollToAnchor from './hooks/useScrollToAnchor'\nimport getTileDimension from './hooks/useTileDimension'\n\nconst minHeight = 'calc(100vh - 10rem)'\nconst works = home.tiles.map((id) =>\n  projects.find((project) => project.id.includes(`${id}.md`)),\n)\n\ntype WorksType = Required<typeof works>\ntype ProjectType = typeof projects[0] | undefined\n\nconst Paddle = ({ ...props }) => (\n  <Button\n    css={{\n      fontSize: '0.875rem',\n      textTransform: 'uppercase',\n      transition: 'color 0.2s',\n      '.no-touch &:hover': {\n        color: '#000',\n      },\n    }}\n    {...props}\n  />\n)\n\nconst App = () => {\n  const [aboutRef, isAboutActive] = useInView({ threshold: 0.75 })\n  const [project, setProject] = useState<ProjectType>()\n  const rowRef = useRef(null)\n  const rowWidth = useRowWidth(rowRef)\n  const scrollToAnchor = useScrollToAnchor()\n  useDetectTouch()\n\n  const handleClickProject = useCallback((e: SyntheticEvent) => {\n    const stuff = projects.find((project) => project.id === e.currentTarget.id)\n    setProject(stuff)\n  }, [])\n\n  const handleCloseProject = useCallback(() => {\n    setProject(undefined)\n  }, [])\n\n  const handleNextProject = useCallback(\n    (e: SyntheticEvent) => {\n      e.stopPropagation()\n      const currentIndex = works.indexOf(project)\n      const nextIndex = currentIndex === works.length - 1 ? 0 : currentIndex + 1\n      const nextProject = works[nextIndex]\n      setProject(nextProject)\n    },\n    [project],\n  )\n\n  const handlePrevProject = useCallback(\n    (e: SyntheticEvent) => {\n      e.stopPropagation()\n      const currentIndex = works.indexOf(project)\n      const prevIndex = currentIndex === 0 ? works.length - 1 : currentIndex - 1\n      const prevProject = works[prevIndex]\n      setProject(prevProject)\n    },\n    [project],\n  )\n\n  return (\n    <Fragment>\n      <Navbar\n        handleClickToSection={scrollToAnchor}\n        isAboutActive={isAboutActive}\n      />\n      <View as=\"main\" role=\"main\">\n        <Grid as=\"section\" css={{ minHeight }} id=\"work\">\n          <Container\n            ref={rowRef}\n            css={{\n              alignItems: 'start',\n              gridAutoRows: 0,\n              gridGap: '0.25rem',\n              gridTemplateColumns: 'repeat(auto-fill, minmax(15rem, 1fr))',\n            }}\n          >\n            {(works as WorksType).map((work) => {\n              const { width, height } = getTileDimension({\n                allowableWidth: rowWidth,\n                naturalWidth: work.tileWidth,\n                naturalHeight: work.tileHeight,\n              })\n              return (\n                <Tile\n                  allowableWidth={rowWidth}\n                  handleClick={handleClickProject}\n                  id={work.id}\n                  key={work.id}\n                  src={work.tile}\n                  title={work.title}\n                  width={width}\n                  height={height}\n                />\n              )\n            })}\n          </Container>\n        </Grid>\n        <Container>\n          <View\n            css={{\n              height: 1,\n              border: 0,\n              backgroundColor: '#858585',\n              margin: '5rem 0',\n            }}\n          />\n        </Container>\n        <Grid as=\"section\" css={{ minHeight }} id=\"about\" ref={aboutRef}>\n          <Container>\n            <Markdown source={about.body} />\n          </Container>\n        </Grid>\n      </View>\n      {project != null && (\n        <Modal\n          isOpen\n          contentLabel={project.title}\n          onRequestClose={handleCloseProject}\n        >\n          <Fragment>\n            <Flex\n              css={{\n                position: 'fixed',\n                right: '1rem',\n                justifyContent: 'flex-end',\n              }}\n            />\n            <Markdown source={project.body} />\n            <Button\n              css={{\n                color: '#454545',\n                position: 'fixed',\n                right: '0.125rem',\n                top: '0.625rem',\n                transition: 'color 0.2s',\n                '.no-touch &:hover': {\n                  color: '#000',\n                },\n                '@media (min-width: 47.5em)': {\n                  right: '1.25rem',\n                  top: '4rem',\n                },\n              }}\n              onClick={handleCloseProject}\n              title=\"Close\"\n            >\n              <X />\n            </Button>\n            <View css={{ color: '#858585', textAlign: 'right' }}>\n              <Paddle onClick={handlePrevProject}>Prev</Paddle>\n              <span> / </span>\n              <Paddle onClick={handleNextProject}>Next</Paddle>\n            </View>\n          </Fragment>\n        </Modal>\n      )}\n    </Fragment>\n  )\n}\n\nexport default memo(App)\n","import ReactDOM from 'react-dom'\nimport App from './App'\n\nasync function loadPolyfills() {\n  if (typeof window.IntersectionObserver === 'undefined') {\n    await import('intersection-observer')\n  }\n  if (!('scrollBehavior' in document.documentElement.style)) {\n    const smoothscroll = await import('smoothscroll-polyfill')\n    smoothscroll.polyfill()\n  }\n}\nloadPolyfills()\n\nconst rootElement = document && document.getElementById('root')\nconst index = rootElement != null && ReactDOM.render(<App />, rootElement)\n\nexport default index\n"],"sourceRoot":""}